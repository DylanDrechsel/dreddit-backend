// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int     @id @default(autoincrement())
  role       Role    @default(USER)
  firstname  String?
  lastname   String?
  username   String  @unique
  email      String  @unique
  password   String
  image      String?

  // user profile relation - One to One
  profile    Profile?

  // all posts user has made - One to Many
  posts      Post[]

  // all comments user has made - One to Many
  comments   Comment[]

  // all likes the users has made - One to Many
  likes      Like[]

  // all images the user has posted - One to Many
  images     Image[]

  // all comments on comments the User has made - One to Many
  childComments ChildComment[]
}

model Post {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  title      String
  content    String?

  // published attribution will allow saving post and posting later
  published  Boolean      @default(false)

  // category for type of post
  category   String

  // Model Relationship (One to Many // User to Post)
  // store userId inside table for prisma to relate to post
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int

  // One to Many // Post to Comments
  comments  Comment[]

  // One to Many // Post to Likes
  likes     Like[] 

  // One to One // Post to Image
  image    Image?

  // Image Url for amazon s3 image hosting
  imageUrl String?
}

model Comment {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  content    String

  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int

  posts      Post?        @relation(fields: [postId], references: [id])
  postId     Int?

  parentCommentId Int?
  parentComment   Comment? @relation("ParentChild", fields: [parentCommentId], references: [id])

  childComments   Comment[] @relation("ParentChild")

  // comments   Comment  @relation(fields: [commentId], references: [id])
  // commentId  Int
}

model ChildComment {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  content    String

  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
}

model Like {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  value      Int

  posts      Post        @relation(fields: [postId], references: [id])
  postId     Int

  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
}

model Profile {
  id      Int     @id @default(autoincrement())
  bio     String
  image   String?
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
}


// model Category {
//   id    Int     @id @default(autoincrement())
//   name  String
//   posts Post[]  @relation(references: [id])
// }

model Image {
  id Int @id @default(autoincrement())
  fieldname String?
  path String
  mimetype   String
  size Int
  originalname String
  encoding   String
  destination String
  filename   String

  posts      Post        @relation(fields: [postId], references: [id])
  postId     Int

  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
}

enum Role {
  USER
  ADMIN
}
